/*
Copyright 2024.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package xyz

import (
	"context"
	"freepik.com/jokati/internal/globals"
	corev1 "k8s.io/api/core/v1"
	"time"

	corelog "log"

	"k8s.io/apimachinery/pkg/runtime"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/log"
)

// WorkloadReconciler reconciles a Notification object
type WorkloadReconciler struct {
	client.Client
	Scheme *runtime.Scheme
}

// Reconcile is part of the main kubernetes reconciliation loop which aims to
// move the current state of the cluster closer to the desired state.
// For more details, check Reconcile and its Result here:
// - https://pkg.go.dev/sigs.k8s.io/controller-runtime@v0.17.0/pkg/reconcile
func (r *WorkloadReconciler) Reconcile(ctx context.Context, req ctrl.Request) (result ctrl.Result, err error) {
	_ = log.FromContext(ctx)

	// 1. Get the content of the event
	eventManifest := &corev1.Event{}
	err = r.Get(ctx, req.NamespacedName, eventManifest)
	if err != nil {
		corelog.Print("Ok, no pude coger el evento. Esto hay que relanzarlo")
	}

	// 2. Listen only to the event type generated by Notification Controller
	if eventManifest.Reason != "NotificationControllerStarted" {
		return ctrl.Result{}, nil
	}

	// 3. Current execution-id does not match with the
	// generated by Notification Controller for this boot. Skip
	if eventManifest.ObjectMeta.Annotations["execution-id"] !=
		globals.ExecContext.Context.Value("execution-id") {
		return ctrl.Result{}, nil
	}

	corelog.Print("HOLA 3, estamos iniciando un bucle aparte")
	for {
		// When context is canceled, quit.
		if ctx.Err() != nil {
			return ctrl.Result{}, nil
		}

		// TODO
		corelog.Print("HOLA 3, soy yo tu lobo")
		time.Sleep(5 * time.Second)
	}

	//return result, err
}

// SetupWithManager sets up the controller with the Manager.
func (r *WorkloadReconciler) SetupWithManager(mgr ctrl.Manager) error {
	return ctrl.NewControllerManagedBy(mgr).
		For(&corev1.Event{}).
		Complete(r)
}
